name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Linting and Type Checking
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Type Check
        run: npx tsc --noEmit

      - name: Check for console.log statements
        run: |
          if grep -r "console\.\(log\|error\|warn\|info\)" --include="*.ts" --include="*.tsx" --exclude="logger.ts" --exclude-dir="node_modules" --exclude-dir="dist" --exclude-dir="build" src/; then
            echo "‚ùå Error: console.log statements found in production code"
            echo "Please use the logger utility instead"
            exit 1
          fi

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security checks
        run: |
          # Check for hardcoded secrets
          if grep -r "SUPABASE\|API_KEY\|SECRET\|PASSWORD\|TOKEN" --include="*.ts" --include="*.tsx" --exclude-dir="node_modules" --exclude="*.example" src/; then
            echo "‚ö†Ô∏è Warning: Potential secrets found in code"
          fi

  # Job 3: Build and Bundle Analysis
  build:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Size Report"
          echo "===================="
          find dist -name "*.js" -o -name "*.css" | while read file; do
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
            echo "$file: $(numfmt --to=iec-i --suffix=B $size)"
          done

          total_js=$(find dist -name "*.js" -exec stat -f%z {} \; 2>/dev/null | paste -sd+ - | bc || find dist -name "*.js" -exec stat -c%s {} \; 2>/dev/null | paste -sd+ - | bc)
          total_css=$(find dist -name "*.css" -exec stat -f%z {} \; 2>/dev/null | paste -sd+ - | bc || find dist -name "*.css" -exec stat -c%s {} \; 2>/dev/null | paste -sd+ - | bc)

          echo ""
          echo "Total JS: $(numfmt --to=iec-i --suffix=B $total_js)"
          echo "Total CSS: $(numfmt --to=iec-i --suffix=B $total_css)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Check bundle size limits
        run: |
          total_size=$(du -sb dist | cut -f1)
          max_size=$((1024 * 1024)) # 1MB limit

          if [ $total_size -gt $max_size ]; then
            echo "‚ùå Bundle size exceeds limit: $(numfmt --to=iec-i --suffix=B $total_size) > 1MB"
            exit 1
          else
            echo "‚úÖ Bundle size within limit: $(numfmt --to=iec-i --suffix=B $total_size)"
          fi

  # Job 4: Tests (placeholder for now)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          echo "‚ö†Ô∏è Tests not yet implemented"
          # npm test
        continue-on-error: true

  # Job 5: Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code complexity
        run: |
          npx eslint src --format json --output-file eslint-report.json || true
          echo "üìä Code Quality Metrics"
          echo "====================="

          # Count files
          echo "Total TypeScript files: $(find src -name "*.ts" -o -name "*.tsx" | wc -l)"

          # Count lines of code
          echo "Lines of code: $(find src -name "*.ts" -o -name "*.tsx" -exec cat {} \; | wc -l)"

          # Check for TODO comments
          todo_count=$(grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" src/ | wc -l || echo 0)
          echo "TODO/FIXME comments: $todo_count"

      - name: Check for large files
        run: |
          echo "üîç Checking for large files..."
          large_files=$(find src -name "*.tsx" -o -name "*.ts" -exec wc -l {} \; | awk '$1 > 300 {print $2 " (" $1 " lines)"}')
          if [ -n "$large_files" ]; then
            echo "‚ö†Ô∏è Files with more than 300 lines:"
            echo "$large_files"
          else
            echo "‚úÖ No excessively large files found"
          fi

  # Job 6: Dependency Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          npm outdated || true

      - name: Check for duplicate dependencies
        run: |
          echo "üîç Checking for duplicate dependencies..."
          npx npm-dedupe --list || true

  # Job 7: Performance Check
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli
          echo "‚ö†Ô∏è Lighthouse CI not configured yet"
          # lhci autorun
        continue-on-error: true

  # Final Job: Report Status
  report:
    name: CI Report
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security, build, test, code-quality, dependency-check, performance]
    if: always()
    steps:
      - name: Report CI Status
        run: |
          echo "üéâ CI Pipeline Complete!"
          echo "========================"
          echo ""
          echo "Job Results:"
          echo "- Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo "- Dependencies: ${{ needs.dependency-check.result }}"
          echo "- Performance: ${{ needs.performance.result }}"

          if [ "${{ needs.build.result }}" = "failure" ] || [ "${{ needs.lint-and-typecheck.result }}" = "failure" ]; then
            echo "‚ùå CI Failed - Critical checks did not pass"
            exit 1
          else
            echo "‚úÖ CI Passed - All critical checks passed"
          fi