import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { enrollmentId, eventRegistrationId, userId, itemType } = await req.json();

    // Initialize Resend (requires API key)
    const resend = new Resend(Deno.env.get("RESEND_API_KEY"));
    
    // Initialize Supabase with service role
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "",
      { auth: { persistSession: false } }
    );

    // Generate invoice number
    const { data: invoiceNumber } = await supabase.rpc('generate_invoice_number');
    
    // Get user details
    const { data: profile } = await supabase
      .from('profiles')
      .select('display_name, email')
      .eq('user_id', userId)
      .single();

    // Get item details (course or event)
    let itemDetails;
    if (itemType === 'course') {
      const { data: enrollment } = await supabase
        .from('enrollments')
        .select('*, courses(*)')
        .eq('id', enrollmentId)
        .single();
      itemDetails = enrollment;
    } else {
      const { data: registration } = await supabase
        .from('event_registrations')
        .select('*, events(*)')
        .eq('id', eventRegistrationId)
        .single();
      itemDetails = registration;
    }

    // Create invoice record
    const { data: invoice } = await supabase
      .from('invoices')
      .insert({
        user_id: userId,
        enrollment_id: enrollmentId || null,
        event_registration_id: eventRegistrationId || null,
        invoice_number: invoiceNumber,
        item_type: itemType,
        item_id: itemType === 'course' ? itemDetails.course_id : itemDetails.event_id,
        item_title: itemType === 'course' ? itemDetails.courses.title : itemDetails.events.title,
        amount: itemDetails.payment_amount,
        currency: 'GBP',
        payment_status: 'paid'
      })
      .select()
      .single();

    // Generate invoice HTML
    const invoiceHtml = `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .header { text-align: center; margin-bottom: 40px; }
            .invoice-details { margin: 20px 0; }
            .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            .table th, .table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
            .table th { background-color: #f2f2f2; }
            .total { font-weight: bold; font-size: 18px; }
            .disclaimer { margin-top: 40px; padding: 20px; background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>AIBORG™ Training Invoice</h1>
            <p>Invoice #: ${invoice.invoice_number}</p>
            <p>Date: ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="invoice-details">
            <h3>Bill To:</h3>
            <p>${profile?.display_name || 'Customer'}</p>
            <p>${profile?.email}</p>
          </div>

          <table class="table">
            <thead>
              <tr>
                <th>Description</th>
                <th>Type</th>
                <th>Amount</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>${invoice.item_title}</td>
                <td>${itemType.charAt(0).toUpperCase() + itemType.slice(1)}</td>
                <td>£${invoice.amount}</td>
              </tr>
            </tbody>
          </table>

          <div class="total">
            <p>Total Amount: £${invoice.amount} GBP</p>
            <p>Status: Paid</p>
          </div>

          <div class="disclaimer">
            <h4>⚠️ Important Notice</h4>
            <p>This invoice has been automatically generated by AIBORG-Agent and may contain errors. Please check with the Aiborg support team on the accuracy of the content of this invoice.</p>
            <p>Contact: hirendra.vikram@aiborg.ai | WhatsApp: +44 7404568207</p>
          </div>
        </body>
      </html>
    `;

    // Send email
    const emailResult = await resend.emails.send({
      from: "AIBORG Training <noreply@aiborg.ai>",
      to: [profile?.email || ''],
      subject: `Invoice ${invoice.invoice_number} - ${invoice.item_title}`,
      html: invoiceHtml,
    });

    return new Response(JSON.stringify({ 
      success: true, 
      invoice: invoice,
      emailId: emailResult.data?.id 
    }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("Invoice generation error:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});